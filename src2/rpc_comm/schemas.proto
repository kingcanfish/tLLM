syntax = "proto3";

package schemas;

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

message Array {
    repeated float elements = 1;  // One-dimensional array of integers
}

message Matrix {
    repeated Array rows = 1;  // Two-dimensional array of integers
}

message Tensor {
    repeated Matrix layers = 1;  // Three-dimensional array of integers
}

message BlockTensor {
    repeated Tensor blocks = 1;  // Four-dimensional array of integers
}

message MultiDimensionalArray {
    // Union type to represent any dimensional array
    oneof multi_array {
        Array array = 1;
        Matrix matrix = 2;
        Tensor tensor = 3;
        BlockTensor block_tensor = 4;
    }
}

message LayerConfig {
    google.protobuf.Struct config = 1;
    int32 layer_idx_start = 2;
    int32 layer_idx_end = 3;
    repeated string tp_url_list = 4;
    int32 tp_size = 5;
    string layer_state_dict_dir = 6;
}

message ForwardData {
    string uuid = 1;
    MultiDimensionalArray hidden_states = 2;
}

message MLPConfig {
    int32 input_size = 1;
    int32 output_size = 2;
    bool mlp_bias = 3;
    string proj_name = 4;
    int32 layer_idx = 5;
    int32 tp_idx = 6;
    int32 tp_size = 7;
    string state_dict_path = 8;
    google.protobuf.Any weight_data = 9;
    google.protobuf.Any bias_data = 10;
    string name = 11;
}

message MLPForwardData {
    string proj_name = 1;
    int32 tp_idx = 2;
    int32 layer_idx = 3;
    MultiDimensionalArray hidden_states = 4;
    string name = 5;
    float cost_time = 6;
}

message StatusResponse {
    string msg = 1;
    int32 status = 2;
}

message ForwardResponse {
    string msg = 1;
    int32 status = 2;
    MultiDimensionalArray output = 3;
    float cost_time = 4;
}

message HealthResponse {
    string msg = 1;
    int32 status = 2;
}

message MLPKeysResponse {
    string msg = 1;
    int32 status = 2;
}

message InitModelFlagResponse {
    bool msg = 1;
    int32 status = 2;
}

message Empty {}


service RPCService {
    rpc InitModel (LayerConfig) returns (StatusResponse);
    rpc Forward (ForwardData) returns (ForwardResponse);
    rpc InitMLP (MLPConfig) returns (StatusResponse);
    rpc ForwardMLP (MLPForwardData) returns (ForwardResponse);
    rpc Health (Empty) returns (HealthResponse);
    rpc MLPKeys (Empty) returns (MLPKeysResponse);
    rpc InitModelFlag (Empty) returns (InitModelFlagResponse);
}
